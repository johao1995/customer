#Filter
Lambda , ojo esto funciona tambien para las tuplas
data=[2,4,5,6,8,1,3,11]

print(list(filter(lambda n:n%2==0,data)))

#Map El map mapea el numero es decir puedes modificar los numeros,agregando caracteres , multiplicando etc
print(list(map(lambda n: "F[%s]" %n,data)))

split(),strip()
data=" C(2),B(1),E(3) "
new_data=data.strip().split(",") --> strip quita los espacios en blanco,split(',') separalos caracteres tomando conmo punto de referencia en este caso la coma
el split los separa   y los alamcena en una lista
print(new_data)

Funcion en una sola linea
dato=1 if True else 0 --> Le estoy diciendo si la condicion es True le da el valor 1 en caso es falso le asigan el valor 0

agregando a un array{] valores que cumplan la condicion

number_pares=[]
def get_number_pares(self):
  for n in [1,2,3,4,5,6]:
  if n%2==0:
    number_pares.append(n)

el ejemplo de la funcion def get_number_pares lo resumo en la linea de abajo y hacen lo mismo 
number_pares=[num for num in [1,2,3,4,5,6,7,8] if num%2==0]
print(number_pares)

#Creacion de excel
import xlsxwriter
import base64
from io import BytesIO

BytesIO: BytesIO es una clase proporcionada por el módulo io de Python. Se utiliza para crear un objeto de flujo de bytes 
en la memoria RAM en lugar de en un archivo en el sistema de archivos.
fou = BytesIO()
workbook = xlsxwriter.Workbook(fou) --> Esto significa que en lugar de escribir los datos del libro de trabajo en un archivo en el sistema d
e archivos, se escriben en el búfer de bytes en la memoria RAM representado por fou.

contenido = fou.getvalue()
-fou.getvalue() -> se utiliza para obtener los datos almacenados en ese buffer en forma de una secuencia de bytes.
base64.encodebytes(contenido) ->Esto se hace para convertir los datos binarios en una forma de texto que sea seguro para ser almacenado en un campo binario en un modelo de Odoo 
