====Backend Punto Venta========
class Session(models.Model):
    _inherit = "pos.session"
    #Esta funci칩n posiblemente se utiliza para cargar los modelos de datos necesarios para la interfaz de usuario del Punto de Venta.
    @api.model
    def _pos_ui_models_to_load(self):
        result = super()._pos_ui_models_to_load()
        result.append('l10n_latam.identification.type')
        result.append("l10n_pe.res.city.district")
     
        return result
    #Esta funci칩n probablemente se utiliza para obtener el nombre del campo que se mostrar치 en la interfaz de usuario del Punto de Venta
    def _get_pos_ui_l10n_pe_res_city_district(self, params):
        return self.env['l10n_pe.res.city.district'].search_read(**params['search_params'])
    #esta funci칩n parece estar relacionada con la carga de campos de nombre
    def _loader_params_l10n_pe_res_city_district(self):
        return {'search_params': {'domain': [], 'fields': ["name","code"]}}
    
    def _get_pos_ui_l10n_latam_identification_type(self, params):
        return self.env['l10n_latam.identification.type'].search_read(**params['search_params'])

    def _loader_params_l10n_latam_identification_type(self):
        return {'search_params': {'domain': [], 'fields': ["name","l10n_pe_vat_code"]}}

    # Esta function muestra los campos que usaremos en el punto de venta
     def _loader_params_res_partner(self):
             params = super()._loader_params_res_partner()
             params["search_params"]["fields"].append("l10n_latam_identification_type_id")
             params["search_params"]["fields"].append("l10n_pe_district")
             return params

    <!--def _loader_params_res_partner(self):
        return {
            'search_params': {
                'domain': [],
                'fields': [
                    'name', 'street', 'city', 'state_id', 'country_id', 'vat', 'lang', 'phone', 'zip', 'mobile', 'email',
                    'barcode', 'write_date', 'property_account_position_id', 'property_product_pricelist', 'parent_name',
                ],
            },
        }-->

odoo.define("modulo_punto_venta.models",function(require){
    "use strict";
    const { PosGlobalState } = require("point_of_sale.models");
    const Registries = require("point_of_sale.Registries");

    const PosGlobalStateModels = (PosGlobalState) => class PosGlobalStateModels extends PosGlobalState{
        async _processData(loadedData){
            await super._processData(loadedData);
            this.l10n_latam_identification_type = loadedData['l10n_latam.identification.type'];
            console.log("===l10n_latam_identification_type===");
            console.log(this.l10n_latam_identification_type);
        }
    }
    Registries.Model.extend(PosGlobalState,PosGlobalStateModels);

}); --> esto obtiene la tabla con los campos que se agrego  _loader_params_l10n_latam_identification_type
 Ahora para mostrarlo en el template 
 <div class="partner-detail">
                        <span class="label">Tipo Doc</span>
                        <select class="detail" name="l10n_latam_identification_type_id">
                            <option value="0">None</option>
                            <t t-foreach="env.pos.l10n_latam_identification_type" t-as="identification_type" t-key="identification_type.id">
                                <option t-att-value="identification_type.id">
                                    <t t-esc="identification_type.name"/>
                                </option>
                            </t>
                        </select>
                    </div> --> para obtener todos los registros de la tabla una ves habiendo sido cargado en   
this.l10n_latam_identification_type = loadedData['l10n_latam.identification.type'];  usamos para obtenerlo en el template el env.pos.l10n_latam_identification_type


========== Odoo Javascript PUnto Venta=======
<?xml version="1.0" encoding="UTF-8"?>

<templates id="template" xml:space="preserve">
    <t t-name="modulo.name_template" t-inherit="point_of_sale.PartnerDetailsEdit --> nombre del template" t-inherit-mode="extension"  owl="1">
        <xpath expr="//input[@name='street']" position="after">
            <h3>NUevo Campo</h3>
        </xpath>
    </t>
</templates>
__manifest__.py --> se configura de esta manera el assets
{
    "name":"johao point of sale",
    "depends":["point_of_sale"],
    "data":[],
    "assets":{
        "point_of_sale.assets":[
            "modulo_point_sale/static/src/xml/PartnerListScreen.xml"
        ]
    }
}

=====Frontend para Javascript Punto Venta=======




======================JavaScript=============

odoo.define('pos_res_partner.models', function (require) {
    "use strict";
    const { PosGlobalState } = require('point_of_sale.models');
    const Registries = require("point_of_sale.Registries");
   
    const PosGlobalStateModels = (PosGlobalState) => class PosGlobalStateModels extends PosGlobalState {
        async _processData(loadedData) {
            await super._processData(loadedData);
            this.identification_type = loadedData['l10n_latam.identification.type'];
            this.l10n_pe_district = loadedData["l10n_pe.res.city.district"];
        }
    }
    Registries.Model.extend(PosGlobalState, PosGlobalStateModels);

});
# Creando una clase

class Customer{
    constructor(name,document){
        this.name = name;
        this.document = document;
    }

    get_data_customer(){
        console.log("Cliente:",this.name);
        console.log("Documento:",this.document);
    }

}

const obj1 = new Customer("Johao",72154125);
obj1.get_data_customer();

# Heredando clase
class Work extends Customer{
    constructor(name,document,area){
        super(name,document)
        this.area = area;
    };

    get_data_work(){
        console.log("Cliente:",this.name);
        console.log("Documento:",this.document);
        console.log("Area:",this.area);
    }

}
const obj_work = new Work("Johao",72154125,"Odoo v16");
