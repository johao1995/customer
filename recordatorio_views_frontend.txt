#para ingresar a la consola de odoo y testear usamos python odoo-bin shell -c odoo.conf -d name_db
para hacer un create,write,unlink al final se tiene que guardar con este comando self.env.cr.commit
item.search(['|',('type_item','=','otro'),('type_item','=','hadware')]) --> '|' es O



widget=EFectos VIsuales
<widget name="web_ribbon" title="Archivado" bg_color="bg_danger"/>
<field name="puntuacion" widget="percentpie"/>
<fiel name="name_campo" widget="boolean_toggle"/>
<field name="name_campo" widget="url"/>
<field name="name_campo" states="borrador"/> --> Le estoy diciendo que el field sera visible cuando el estado del state_presupuesto este en borrador 
ejemplo:
<field name="state"/>--> actualmente esta en estado borrador
ojo el campo tiene que llamarse obligatoriamente state=fields.Selection(selection=[('aprobado','Aprobado'),('borrador','Borrador')] , por que si no , el atributo states="borrador" no funcionara

-En resumen, la clase "oe_avatar" se utiliza para definir la apariencia de las imágenes de perfil de usuario y los iconos de menú en la interfaz de usuario de Odoo 16. Esta clase se utiliza en la plantilla base "web.assets_backend" y en la plantilla "web.menu" para definir la apariencia de la barra lateral y los menús de la interfaz de usuario.

-En resumen, la clase "oe_title" se utiliza para definir el estilo de los títulos en la interfaz de usuario de Odoo 16. Esta clase se utiliza en varias plantillas de Odoo para definir el estilo de los títulos de sección y los títulos de registro en la vista de formulario y la vista de lista.

-En resumen, la clase "o_row" se utiliza para definir el estilo de las filas en las tablas de la interfaz de usuario de Odoo 16. Esta clase se utiliza en varias plantillas de Odoo para definir el estilo de las filas que muestran los registros y los campos en la vista de lista y la vista de formulario.

En resumen, self.env.ref('aca_se pone external_id.id_record') -->ref('movies.data_director')
se utiliza en Odoo 16 para obtener un registro específico de la base de datos de Odoo utilizando su identificador único xml_id.

attributos de vistas
optional="show" -->mostrar se usa para vistas tree
optional="hide"--->ocultar se usa para vistas tree

decoraciones 
widget="badge"
decoration-bf-->negrita
decoration-it-->cursiva
decoration-danger-->rojo
decoration-info-->azul claro
decoration-muted-->gris claro
decoration-success-->verde
decoration-warning-->mostaza

condiciones con estas decoraciones 
ejemplo
<field name="" decoration-info=" field == 'aprobado'"

#En Odoo 14, la clase "oe_button_box" se utiliza para definir un contenedor de botones en la interfaz de usuario de Odoo. Esta clase se utiliza para agrupar un conjunto de botones relacionados en una sola área de la pantalla
<div class="oe_button_box" name="button_box">
    <button class="oe_highlight" icon="" >Guardar</button> -->icon="" te mostrara el icono de font awesome
    <button class="oe_secondary">Cancelar</button>
    <a href="#" class="oe_inline">Más información</a>
</div>

options
Atributos de campo de view
domain=Filtracion --> <field name="category_id" domain=[('','',')]
context=pasa valor por defecto
attrs=invisible,readonly,required ---> <field name="" attrs="{'invisible':True}"
options=no_quick_create-->no crear no_create_edit-->no crear y eitar  no_open-->no te permite abrir un selector o opcion
<field name="field" options="{'no_create':True}"


Tipos de Monedas
creas un campo para ver el tipo de moneda que seleccionaras
currency_id=fields.Many2one(comodel_name="res.currency")

ahora en la view form

<field name="amount" widget="monetary" options="{'currency_field':'currency_id'}"
  <record id="ir_rule_user_free_own_information_university_student" model="ir.rule">
        <field name="name">Informacion Propia Student</field>
        <field name="model_id" ref="university.model_university_student"/>
        <field name="groups" eval="[(4,ref('res_groups_university_user_free'))]"/><!--asociando esta regla a un grupo existente-->
        <field name="domain_force">
            [('create_uid','=',user.id)]<!--create_uid es el di que por defecto se agrega a las tablas de odoo para de este modo saber que usuario esta registrando,creando,eliminado informacion-->
        </field>
        <field name="perm_read">1</field>
        <field name="perm_write">1</field>
        <field name="perm_create">1</field>
        <field name="perm_unlink">1</field>
 </record
 
 #view de tipo search
 <record id="biblioteca.view_search_library_book" model="ir.ui.view">
        <field name="name">biblioteca.view.search.library.book</field>
        <field name="model">library.book</field>
        <field name="arch" type="xml">
            <search>
                <field name="codigo"/>
                <field name="name"/>
                <field name="author_id"/>

                <filter string="Literatura" name="filter_literatura" domain="[('type_books','=','literatura')]"/>
                <filter string="Cuento" name="filter_cuento" domain="[('type_books','=','cuento')]"/>
                <filter string="Novela" name="filter_novela" domain="[('type_books','=','novela')]"/>
                <filter string="Peomas" name="filter_poema" domain="[('type_books','=','poema')]"/>
                <!--group by-->
                <filter string="Type Books" name="group_type_book" context="{'group_by':'type_books'}"/>---> agrupando  el name puede ser cualquerira
            </search>
        </field>
    </record>


 #campos compute
 los campos que tengan como atributo compute, en la base datos no se almacenan pero si deseas que se almacene se usa el attributo store=True
 quanty=fields.Float(compute='compute_total',store=True)
 
 Sentencia SQL
  def filter_date(self):
        fuel_litres=100
        sql="SELECT * FROM test_car WHERE fuel_litres<{}".format(fuel_litres)
        self.env.cr.execute(sql)
        result=self.env.cr.fetchall()---> Transforma el resultado en un array de tuplas
         result=self.env.cr.dictfetchall()---> Transforma el resultado en un array de diccionarios
        print(result)
 
 #Sobreescribiendo el name_get(self) que viene por defecto
 
    def name_get(self):
        result=[]
        for user in self:
            name="{}(+{})".format(self.name,self.phone)
            result.append((user.id,name))-->Necesita el Id del register y luego va el nombre que deseas que aparesca
        return result
        
        
Tipos de excepciones en Odoo
Las excepciones se utilizan en programación para alertar de situaciones anómalas que suceden durante la ejecución de una aplicación o programa. En Odoo se utilizan con el mismo objetivo y la manera de implementarlas es utilizando la palabra reservada raisedel lenguaje Python. La forma en la que se presentan al usuario es mediante una ventana en la parte superior del navegador en la que se muestra el tipo de excepción y el mensaje asociado.

Veamos ahora los diferenrtes tipos de excepciones que podemos manejar en Odoo:

odoo.exceptions.AccessDenied: Se utiliza cuando se debe denegar el acceso a una determinada parte de la aplicación cuando los datos que se esperan no son los obtenidos.

odoo.exceptions.AccessError: Se utiliza para mostrar que el usuario en sesión no dispone de accesos de algún tipo a algún recurso.

odoo.exceptions.CacheMiss: Se emplea cuando se trata de acceder a un registro en caché que ya no existe.

odoo.exceptions.MissingError: Se utiliza para denotar que se trata de modificar un registro que ya se encuentra borrado con anterioridad.

odoo.exceptions.RedirectWarning: Se utiliza para, además de mostrar un mensaje al usuario (advertencia), redirigir a otra vista por medio de una acción. La función recibe dos parámetros: el ID de la acción a la que tratamos de redirigir al usuario y el mensaje que se quiere mostrar al usuario.

odoo.exceptions.UserError: Se emplea cuando un usuario trata de agregar un valor a un registro y el estado del registro no es el correcto porque no se cumplen ciertas condiciones.

odoo.exceptions.ValidationError: Se aplica cuando las condiciones que afectan a un determinado registro fallan.

#posiciones para herencias
div[1] empieza con el 1

#obtener los parametros de la url de un model en odoo
def test(self):
        print(self)--> Llama al objeto
        print(self._context)-->{
                                  'lang': 'es_PE',
                                  'tz': False,
                                  'uid': 1,
                                  'allowed_company_ids': [
                                    1
                                  ],
                                  'params': {
                                    'id': 8,
                                    'cids': 1,
                                    'menu_id': 72,
                                    'action': 88,
                                    'model': 'minimarket.product',
                                    'view_type': 'form'
                                  }
                                }
        

